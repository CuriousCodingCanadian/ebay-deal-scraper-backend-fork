<script lang="ts">
    import { goto } from '$app/navigation';
    import { onMount } from 'svelte';

    let searchQuery = '';
    let filterAuction = true;
    let filterBuyItNow = true;
    let sortBy = 'best-match';
    let pageNumber = 1;
    let minPrice = '';
    let maxPrice = '';
    console.log('🔄 [Client] Debug: Components and variables initialized');

    function handleSubmit() {
        pageNumber = 1; // Reset page number on new search

        let filter = '';
        if (filterAuction === filterBuyItNow) { // if they are both equal, that means both boxes are either unchecked or checked
            filter = 'all';
        } else if (filterAuction) {
            filter = 'auction';
        } else if (filterBuyItNow) {
            filter = 'buy-it-now';
        } else {
            console.log(`[Client] Debug: Unexpected result for 'filter': ${filter}. Defaulting to 'all'...`)
        }

        const queryParams = new URLSearchParams({
            search: searchQuery,
            filter: filter,
            sort: sortBy,
            page: pageNumber.toString(),
            minPrice: minPrice,
            maxPrice: maxPrice,
        }).toString();
        goto(`/results?${queryParams}`);
        console.log('[Client] Debug: Navigating to results page:', `/results?${queryParams}`);
    }

    onMount(() => {
        // ACCORDION JS
        const sections = document.querySelectorAll(".section");
        sections.forEach((section) => {
            section.addEventListener("click", (event) => {
                const target = event.target ? (event.target as Element).closest(".section-title") : null;
                if (!target) return;

                const content = target.nextElementSibling as HTMLElement; // Type assertion
                const icon = target.querySelector("i") as HTMLElement; // Type assertion

                const isActive = content && content.classList.contains("active");

                document.querySelectorAll(".section-content").forEach((el) => {
                    (el as HTMLElement).style.maxHeight = "0px";
                    el.classList.remove("active");
                });

                document.querySelectorAll(".section-title i").forEach((icon) => {
                    (icon as HTMLElement).style.transform = "rotate(0deg)";
                });

                if (!isActive) {
                    if (content) {
                        content.classList.add("active");
                    }
                    if (content) {
                        content.style.maxHeight = content.scrollHeight + "px";
                    }
                    if (icon) {
                        icon.style.transform = "rotate(90deg)";
                    }
                }
            });
        });
    });
</script>

<style lang="scss">
    @import "/static/style.scss";
</style>

<div class="accordion">
    <div class="section">
        <p class="section-title"><i class="fa-solid fa-chevron-right"></i>&nbsp;&nbsp;Search Filters</p>
        <div class="section-content"> 
            <div class="text">
                <div id="input-container">
                    <label for="search">Search:</label>
                    <input type="text" id="search" bind:value={searchQuery} on:input={() => console.log('📝 [Client] Debug: Search query updated:', searchQuery)} placeholder="Enter search query...">
            
                    <label for="type"></label>
                    <div style="margin-top: 15px !important;">
                        <label>
                            <input type="checkbox" bind:checked={filterAuction}>
                            Auction
                        </label>
                        <br>
                        <label>
                            <input type="checkbox" bind:checked={filterBuyItNow}>
                            Buy It Now
                        </label>
                    </div>
            
                    {#if filterAuction && !filterBuyItNow}
                        <p class="warning" style="text-align: center !important;"><span class="warning-red">Warning:</span> The auction filter might not work as expected. The issue is being investigated.</p>
                    {/if}
                    
                    <label for="sort" style="margin-top: 15px !important;">Sort By:</label>
                    <select id="sort" bind:value={sortBy} on:change={() => console.log('📊 [Client] Debug: Sort changed to:', sortBy)}>
                        <option value="best-match">Best Match</option>
                        <option value="price">Price + Shipping (lowest to highest)</option>
                        <option value="-price">Price + Shipping (highest to lowest)</option>
                        <option value="newly-listed">List Time (new to old)</option>
                        {#if filterAuction && !filterBuyItNow}
                            <option value="end-time">Auction End Time</option>
                        {/if}
                    </select>
            
                    <label for="minPrice" style="margin-top: 15px !important;">Min Price:</label>
                    <input type="number" id="minPrice" bind:value={minPrice} placeholder="Enter min price">
            
                    <label for="maxPrice" style="margin-top: 15px !important;">Max Price:</label>
                    <input type="number" id="maxPrice" bind:value={maxPrice} placeholder="Enter max price">
            
                    <button style="margin-top: 35px !important;" on:click={handleSubmit}>Search</button>
                </div>
            </div>
        </div>
    </div>
</div>